// <auto-generated />
using System;
using Infrastructure.Database.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211031082938_Initial-Data")]
    partial class InitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.BettingType", b =>
                {
                    b.Property<string>("strID")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("eName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("vDescription")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("vName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("strID");

                    b.ToTable("BettingTypes");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<string>("FifaAlphaCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FifaAlphaCode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.Entities.Federation", b =>
                {
                    b.Property<string>("FName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("FName");

                    b.ToTable("Federations");
                });

            modelBuilder.Entity("Domain.Entities.Match", b =>
                {
                    b.Property<string>("MatchId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateMatch")
                        .HasColumnType("date");

                    b.Property<int?>("GGoal")
                        .HasColumnType("int");

                    b.Property<string>("GTeam")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("HGoal")
                        .HasColumnType("int");

                    b.Property<string>("HTeam")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("int");

                    b.Property<int>("MatchYear")
                        .HasColumnType("int");

                    b.Property<string>("Referee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Round")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeasonId")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Stadium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("TimeMatch")
                        .HasColumnType("time");

                    b.Property<long?>("Visistors")
                        .HasColumnType("bigint");

                    b.Property<string>("WinNote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MatchId");

                    b.HasIndex("GTeam");

                    b.HasIndex("HTeam");

                    b.HasIndex("SeasonId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Domain.Entities.Season", b =>
                {
                    b.Property<string>("SeasonId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TournamentId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SeasonId");

                    b.HasIndex("TournamentId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Property<string>("TeamName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FifaAlphaCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TeamCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TeamName");

                    b.HasIndex("FifaAlphaCode");

                    b.HasIndex("TypeName");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Domain.Entities.TeamType", b =>
                {
                    b.Property<string>("TypeName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("TypeName");

                    b.ToTable("TeamTypes");
                });

            modelBuilder.Entity("Domain.Entities.Tournament", b =>
                {
                    b.Property<string>("TournamentId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FederationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TournamentId");

                    b.HasIndex("FederationName");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Domain.Entities.Match", b =>
                {
                    b.HasOne("Domain.Entities.Team", "GuestTeam")
                        .WithMany("GuestMatches")
                        .HasForeignKey("GTeam");

                    b.HasOne("Domain.Entities.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HTeam");

                    b.HasOne("Domain.Entities.Season", "Seasons")
                        .WithMany("Matches")
                        .HasForeignKey("SeasonId");

                    b.Navigation("GuestTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("Domain.Entities.Season", b =>
                {
                    b.HasOne("Domain.Entities.Tournament", "Tournaments")
                        .WithMany("Seasons")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.HasOne("Domain.Entities.Country", "Countries")
                        .WithMany("Teams")
                        .HasForeignKey("FifaAlphaCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TeamType", "TeamTypes")
                        .WithMany("Teams")
                        .HasForeignKey("TypeName");

                    b.Navigation("Countries");

                    b.Navigation("TeamTypes");
                });

            modelBuilder.Entity("Domain.Entities.Tournament", b =>
                {
                    b.HasOne("Domain.Entities.Federation", "Federations")
                        .WithMany("Tournaments")
                        .HasForeignKey("FederationName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Federations");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Domain.Entities.Federation", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Domain.Entities.Season", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Navigation("GuestMatches");

                    b.Navigation("HomeMatches");
                });

            modelBuilder.Entity("Domain.Entities.TeamType", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Seasons");
                });
#pragma warning restore 612, 618
        }
    }
}
